'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { cn } from '@/lib/utils';
import {
  Calendar,
  Download,
  Share2,
  Smartphone,
  Globe,
  Clock,
  MapPin,
  User,
  Bell,
  Check,
  Copy,
  Mail,
  MessageSquare,
  ExternalLink,
} from 'lucide-react';
import { CalendarExportData, AppointmentBooking } from '@/types/appointment';
import { Doctor, Clinic } from '@/types/doctor';
import { format, addMinutes } from 'date-fns';
import { id as idLocale } from 'date-fns/locale';

interface CalendarExportProps {
  appointment: AppointmentBooking;
  doctor: Doctor;
  clinic?: Clinic;
  locale?: 'en' | 'id';
  className?: string;
}

const CalendarExport: React.FC<CalendarExportProps> = ({
  appointment,
  doctor,
  clinic,
  locale = 'id',
  className,
}) => {
  const [selectedReminders, setSelectedReminders] = useState<number[]>([60, 1440]); // 1 hour and 1 day
  const [includeLocation, setIncludeLocation] = useState(true);
  const [includeNotes, setIncludeNotes] = useState(true);
  const [copied, setCopied] = useState<string | null>(null);

  // Generate calendar export data
  const generateExportData = (): CalendarExportData => {
    const startDateTime = new Date(`${appointment.scheduledDate}T${appointment.scheduledTime}`);
    const endDateTime = addMinutes(startDateTime, appointment.duration);

    const title = locale === 'id'
      ? `Janji Temu dengan ${doctor.name}`
      : `Appointment with ${doctor.name}`;

    const description = [
      locale === 'id' ? 'Detail Janji Temu:' : 'Appointment Details:',
      `${locale === 'id' ? 'Dokter:' : 'Doctor:'} ${doctor.name}`,
      `${locale === 'id' ? 'Spesialisasi:' : 'Specialization:'} ${
        locale === 'id' ? doctor.specializations[0]?.nameId : doctor.specializations[0]?.name
      }`,
      clinic ? `${locale === 'id' ? 'Klinik:' : 'Clinic:'} ${clinic.name}` : '',
      `${locale === 'id' ? 'Durasi:' : 'Duration:'} ${appointment.duration} ${locale === 'id' ? 'menit' : 'minutes'}`,
      includeNotes && appointment.notes ? `${locale === 'id' ? 'Catatan:' : 'Notes:'} ${appointment.notes}` : '',
      '',
      locale === 'id' ? 'Dihasilkan oleh MedCore Patient App' : 'Generated by MedCore Patient App',
    ].filter(Boolean).join('\n');

    return {
      title,
      description,
      startTime: startDateTime.toISOString(),
      endTime: endDateTime.toISOString(),
      location: includeLocation && clinic ? `${clinic.name}, ${clinic.address}, ${clinic.city}` : '',
      reminders: selectedReminders.map(minutes => ({
        method: 'popup',
        minutes,
      })),
      url: `https://medcore.app/appointments/${appointment.id}`,
    };
  };

  // Generate ICS file content
  const generateICSContent = (): string => {
    const data = generateExportData();
    const startDate = new Date(data.startTime);
    const endDate = new Date(data.endTime);

    const formatICSDate = (date: Date): string => {
      return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
    };

    const escapeICSText = (text: string): string => {
      return text.replace(/[,;\\]/g, '\\$&').replace(/\n/g, '\\n');
    };

    const icsContent = [
      'BEGIN:VCALENDAR',
      'VERSION:2.0',
      'PRODID:-//MedCore//Patient App//EN',
      'CALSCALE:GREGORIAN',
      'BEGIN:VEVENT',
      `UID:${appointment.id}@medcore.app`,
      `DTSTART:${formatICSDate(startDate)}`,
      `DTEND:${formatICSDate(endDate)}`,
      `SUMMARY:${escapeICSText(data.title)}`,
      `DESCRIPTION:${escapeICSText(data.description)}`,
      data.location ? `LOCATION:${escapeICSText(data.location)}` : '',
      `URL:${data.url}`,
      'STATUS:CONFIRMED',
      'TRANSP:OPAQUE',
      ...data.reminders!.map(reminder => [
        'BEGIN:VALARM',
        'ACTION:DISPLAY',
        `DESCRIPTION:${escapeICSText(data.title)}`,
        `TRIGGER:-PT${reminder.minutes}M`,
        'END:VALARM',
      ].join('\n')),
      'END:VEVENT',
      'END:VCALENDAR',
    ].filter(Boolean).join('\n');

    return icsContent;
  };

  // Download ICS file
  const downloadICS = () => {
    const icsContent = generateICSContent();
    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = `appointment-${appointment.id}.ics`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Generate Google Calendar URL
  const generateGoogleCalendarURL = (): string => {
    const data = generateExportData();
    const params = new URLSearchParams({
      action: 'TEMPLATE',
      text: data.title,
      dates: `${data.startTime.replace(/[-:]/g, '').split('.')[0]}Z/${data.endTime.replace(/[-:]/g, '').split('.')[0]}Z`,
      details: data.description,
      location: data.location || '',
    });

    return `https://calendar.google.com/calendar/render?${params.toString()}`;
  };

  // Generate Outlook URL
  const generateOutlookURL = (): string => {
    const data = generateExportData();
    const params = new URLSearchParams({
      subject: data.title,
      startdt: data.startTime,
      enddt: data.endTime,
      body: data.description,
      location: data.location || '',
    });

    return `https://outlook.live.com/calendar/0/deeplink/compose?${params.toString()}`;
  };

  // Copy to clipboard
  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(type);
      setTimeout(() => setCopied(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // Share via Web Share API
  const shareAppointment = async () => {
    const data = generateExportData();

    if (navigator.share) {
      try {
        await navigator.share({
          title: data.title,
          text: data.description,
          url: data.url,
        });
      } catch (err) {
        console.error('Failed to share:', err);
      }
    } else {
      // Fallback: copy to clipboard
      const shareText = `${data.title}\n\n${data.description}\n\n${data.url}`;
      await copyToClipboard(shareText, 'share');
    }
  };

  // Generate sharing URLs
  const generateSharingURLs = () => {
    const data = generateExportData();
    const encodedText = encodeURIComponent(`${data.title}\n\n${data.description}`);
    const encodedUrl = encodeURIComponent(data.url || '');

    return {
      whatsapp: `https://wa.me/?text=${encodedText}%0A%0A${encodedUrl}`,
      telegram: `https://t.me/share/url?url=${encodedUrl}&text=${encodedText}`,
      email: `mailto:?subject=${encodeURIComponent(data.title)}&body=${encodedText}%0A%0A${encodedUrl}`,
    };
  };

  const sharingURLs = generateSharingURLs();

  return (
    <div className={cn('space-y-4', className)}>
      {/* Quick Actions */}
      <div className="grid grid-cols-2 gap-3">
        <Button
          onClick={downloadICS}
          variant="outline"
          className="flex items-center space-x-2"
        >
          <Download className="h-4 w-4" />
          <span>{locale === 'id' ? 'Unduh .ics' : 'Download .ics'}</span>
        </Button>

        <Button
          onClick={shareAppointment}
          variant="outline"
          className="flex items-center space-x-2"
        >
          <Share2 className="h-4 w-4" />
          <span>{locale === 'id' ? 'Bagikan' : 'Share'}</span>
        </Button>
      </div>

      {/* Calendar Services */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base flex items-center space-x-2">
            <Calendar className="h-4 w-4" />
            <span>{locale === 'id' ? 'Tambah ke Kalender' : 'Add to Calendar'}</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-1 gap-2">
            {/* Google Calendar */}
            <Button
              variant="outline"
              onClick={() => window.open(generateGoogleCalendarURL(), '_blank')}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-600 rounded flex items-center justify-center">
                  <Calendar className="h-4 w-4 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-medium">Google Calendar</div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Buka di Google Calendar' : 'Open in Google Calendar'}
                  </div>
                </div>
                <ExternalLink className="h-4 w-4 ml-auto" />
              </div>
            </Button>

            {/* Outlook */}
            <Button
              variant="outline"
              onClick={() => window.open(generateOutlookURL(), '_blank')}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-800 rounded flex items-center justify-center">
                  <Calendar className="h-4 w-4 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-medium">Outlook Calendar</div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Buka di Outlook' : 'Open in Outlook'}
                  </div>
                </div>
                <ExternalLink className="h-4 w-4 ml-auto" />
              </div>
            </Button>

            {/* Apple Calendar (iOS) */}
            <Button
              variant="outline"
              onClick={downloadICS}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gray-800 rounded flex items-center justify-center">
                  <Calendar className="h-4 w-4 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-medium">Apple Calendar</div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Unduh file .ics' : 'Download .ics file'}
                  </div>
                </div>
                <Download className="h-4 w-4 ml-auto" />
              </div>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Sharing Options */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base flex items-center space-x-2">
            <Share2 className="h-4 w-4" />
            <span>{locale === 'id' ? 'Bagikan Janji Temu' : 'Share Appointment'}</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid grid-cols-1 gap-2">
            {/* WhatsApp */}
            <Button
              variant="outline"
              onClick={() => window.open(sharingURLs.whatsapp, '_blank')}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-green-600 rounded flex items-center justify-center">
                  <MessageSquare className="h-4 w-4 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-medium">WhatsApp</div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Bagikan via WhatsApp' : 'Share via WhatsApp'}
                  </div>
                </div>
                <ExternalLink className="h-4 w-4 ml-auto" />
              </div>
            </Button>

            {/* Email */}
            <Button
              variant="outline"
              onClick={() => window.open(sharingURLs.email, '_blank')}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-blue-500 rounded flex items-center justify-center">
                  <Mail className="h-4 w-4 text-white" />
                </div>
                <div className="text-left">
                  <div className="font-medium">Email</div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Bagikan via email' : 'Share via email'}
                  </div>
                </div>
                <ExternalLink className="h-4 w-4 ml-auto" />
              </div>
            </Button>

            {/* Copy Link */}
            <Button
              variant="outline"
              onClick={() => copyToClipboard(generateExportData().url || '', 'link')}
              className="justify-start h-auto p-3"
            >
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gray-600 rounded flex items-center justify-center">
                  {copied === 'link' ? (
                    <Check className="h-4 w-4 text-white" />
                  ) : (
                    <Copy className="h-4 w-4 text-white" />
                  )}
                </div>
                <div className="text-left">
                  <div className="font-medium">
                    {copied === 'link'
                      ? (locale === 'id' ? 'Link Tersalin!' : 'Link Copied!')
                      : (locale === 'id' ? 'Salin Link' : 'Copy Link')
                    }
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {locale === 'id' ? 'Salin link janji temu' : 'Copy appointment link'}
                  </div>
                </div>
              </div>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Advanced Options */}
      <Sheet>
        <SheetTrigger asChild>
          <Button variant="outline" className="w-full">
            {locale === 'id' ? 'Opsi Lanjutan' : 'Advanced Options'}
          </Button>
        </SheetTrigger>
        <SheetContent side="bottom" className="h-[80vh]">
          <SheetHeader>
            <SheetTitle>
              {locale === 'id' ? 'Pengaturan Ekspor Kalender' : 'Calendar Export Settings'}
            </SheetTitle>
          </SheetHeader>

          <div className="space-y-6 mt-6">
            {/* Reminder Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base flex items-center space-x-2">
                  <Bell className="h-4 w-4" />
                  <span>{locale === 'id' ? 'Pengingat' : 'Reminders'}</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {[
                  { value: 15, label: locale === 'id' ? '15 menit sebelum' : '15 minutes before' },
                  { value: 60, label: locale === 'id' ? '1 jam sebelum' : '1 hour before' },
                  { value: 1440, label: locale === 'id' ? '1 hari sebelum' : '1 day before' },
                  { value: 10080, label: locale === 'id' ? '1 minggu sebelum' : '1 week before' },
                ].map((reminder) => (
                  <div key={reminder.value} className="flex items-center space-x-2">
                    <Checkbox
                      id={`reminder-${reminder.value}`}
                      checked={selectedReminders.includes(reminder.value)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedReminders([...selectedReminders, reminder.value]);
                        } else {
                          setSelectedReminders(selectedReminders.filter(r => r !== reminder.value));
                        }
                      }}
                    />
                    <Label htmlFor={`reminder-${reminder.value}`} className="text-sm">
                      {reminder.label}
                    </Label>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Additional Options */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">
                  {locale === 'id' ? 'Opsi Tambahan' : 'Additional Options'}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="include-location"
                    checked={includeLocation}
                    onCheckedChange={setIncludeLocation}
                  />
                  <Label htmlFor="include-location" className="text-sm">
                    {locale === 'id' ? 'Sertakan informasi lokasi' : 'Include location information'}
                  </Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="include-notes"
                    checked={includeNotes}
                    onCheckedChange={setIncludeNotes}
                  />
                  <Label htmlFor="include-notes" className="text-sm">
                    {locale === 'id' ? 'Sertakan catatan pasien' : 'Include patient notes'}
                  </Label>
                </div>
              </CardContent>
            </Card>

            {/* Preview */}
            <Card>
              <CardHeader>
                <CardTitle className="text-base">
                  {locale === 'id' ? 'Pratinjau' : 'Preview'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm">
                  <div><strong>{locale === 'id' ? 'Judul:' : 'Title:'}</strong> {generateExportData().title}</div>
                  <div><strong>{locale === 'id' ? 'Waktu:' : 'Time:'}</strong> {format(new Date(generateExportData().startTime), 'EEEE, dd MMMM yyyy HH:mm', {
                    locale: locale === 'id' ? idLocale : undefined,
                  })}</div>
                  {includeLocation && clinic && (
                    <div><strong>{locale === 'id' ? 'Lokasi:' : 'Location:'}</strong> {clinic.name}</div>
                  )}
                  <div><strong>{locale === 'id' ? 'Pengingat:' : 'Reminders:'}</strong> {selectedReminders.length} {locale === 'id' ? 'pengingat' : 'reminders'}</div>
                </div>
              </CardContent>
            </Card>

            {/* Actions */}
            <div className="space-y-3">
              <Button onClick={downloadICS} className="w-full">
                <Download className="h-4 w-4 mr-2" />
                {locale === 'id' ? 'Unduh dengan Pengaturan Ini' : 'Download with These Settings'}
              </Button>
            </div>
          </div>
        </SheetContent>
      </Sheet>
    </div>
  );
};

export default CalendarExport;